//---------------------------------------------------------------------------
//! @file   ResourceModel.cpp
//! @brief  3Dモデルリソース
//---------------------------------------------------------------------------
#include "ResourceModel.h"
#include "ModelCache.h"

//---------------------------------------------------------------------------
//! コンストラクタ
//---------------------------------------------------------------------------
ResourceModel::ResourceModel(std::string_view path)
{
    //-----------------------------------------------------------------------
    // MV1モデルの読み込み
    //-----------------------------------------------------------------------
    auto model_path = std::string(path);
    // パスの保存
    path_ = convertTo(model_path);

    // ハンドルの非同期読み込み処理が完了したら呼ばれる関数
    auto finish_callback = [](int mv1_handle, void* data) {
        auto* resource = reinterpret_cast<ResourceModel*>(data);

        // ジオメトリのキャッシュファイルが無かったら作成する
        auto* model_cache = resource->model_cache_.get();
        if(!model_cache->isExist()) {
            model_cache->save(mv1_handle);

            // 読み込みなおす
            model_cache->load();
        }

        // アクティブフラグを設定
        resource->active_ = true;
    };

    //----------------------------------------------------------
    // キャッシュファイルの読み込み
    // キャッシュにはリダクションされたワイヤーフレーム表示用の頂点データーが入っています
    //----------------------------------------------------------
    model_cache_      = std::make_unique<ModelCache>(model_path);
    bool cache_result = model_cache_->load();

    //----------------------------------------------------------
    // 非同期読み込み
    //----------------------------------------------------------
    SetUseASyncLoadFlag(cache_result);   // キャッシュファイルが無かった場合はブロッキングロードにする
    {
        // モデルの読み込み
        mv1_handle_ = MV1LoadModel(model_path.c_str());
        SetASyncLoadFinishCallback(mv1_handle_, (void (*)(int, void*))finish_callback, this);
    }
    SetUseASyncLoadFlag(false);
};

//---------------------------------------------------------------------------
//! デストラクタ
//---------------------------------------------------------------------------
ResourceModel::~ResourceModel()
{
    MV1DeleteModel(mv1_handle_);
}

//---------------------------------------------------------------------------
//! 読み込み完了まで待つ
//---------------------------------------------------------------------------
void ResourceModel::waitForReadFinish()
{
    if(isActive() == false) {
        WaitHandleASyncLoad(mv1_handle_);
    }
}

//---------------------------------------------------------------------------
//! [DxLib] MV1ハンドルを取得
//---------------------------------------------------------------------------
ResourceModel::operator int() const
{
    return mv1_handle_;
}

//---------------------------------------------------------------------------
//! モデルキャッシュを取得
//---------------------------------------------------------------------------
ModelCache* ResourceModel::modelCache() const
{
    return model_cache_.get();
}

//---------------------------------------------------------------------------
//! ファイルパスを取得
//---------------------------------------------------------------------------
const std::wstring& ResourceModel::path() const
{
    return path_;
}

//---------------------------------------------------------------------------
//! 初期化が正しく成功しているかどうか
//---------------------------------------------------------------------------
bool ResourceModel::isValid() const
{
    return mv1_handle_ != -1;
}

//---------------------------------------------------------------------------
//! 描画可能な状態かどうか取得
//---------------------------------------------------------------------------
bool ResourceModel::isActive() const
{
    return active_;
}
